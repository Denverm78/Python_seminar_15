# –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å–ø–µ–ª–∏ —Ä–µ—à–∏—Ç—å –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–µ.
# üìå –í–æ–∑—å–º–∏—Ç–µ –ª—é–±—ã–µ 1-3 –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.
# –î–æ–±–∞–≤—å—Ç–µ –∫ –Ω–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. 
# –¢–∞–∫–∂–µ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

# –û—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª 4-—é –∑–∞–¥–∞—á—É - –¥–æ–±–∞–≤–∏–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã (task4.py)
# –°–¥–µ–ª–∞–ª –ø—è—Ç—É—é –∑–∞–¥–∞—á—É (task5.py)
# –°–¥–µ–ª–∞–ª –¥–æ–º–∞—à–Ω—é—é –∑–∞–¥–∞—á—É vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

import argparse
import logging

logging.basicConfig(filename="result_7.log", filemode='w', encoding='utf-8', level=logging.INFO)
logger = logging.getLogger(__name__)


def _check_year(year): 
    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
        return True 
    else: 
        return False

def check_date(date_str):
    logger.info(date_str)
    LONG_MONTH = [1, 3, 5, 7, 8, 10, 12]
    SHORT_MONTH = [4, 6, 9, 11]
    FEBRUARY = 2
    DAY_LONG_MONTH = 31
    DAY_SHORT_MONTH = 30
    DAY_LONG_FEBRUARY = 29
    DAY_SHORT_FEBRUARY = 28
    date_list = []
    for n in date_str.split("."):
        date_list.append(int(n))

    if 1 <= date_list[2] <= 9999:
        if date_list[1] in LONG_MONTH:
            if 1 <= date_list[0] <= DAY_LONG_MONTH:
                return True
            else: return False
        elif date_list[1] in SHORT_MONTH:
            if 1 <= date_list[0] <= DAY_SHORT_MONTH:
                return True
            else: return False    
        elif date_list[1] == FEBRUARY:
            if _check_year(date_list[2]) == True:
                if 1 <= date_list[0] <= DAY_LONG_FEBRUARY:
                    return True
                else: return False
            else: 
                if 1 <= date_list[0] <= DAY_SHORT_FEBRUARY:
                    return True
                else: return False
        else: return False
    else: return False

def parser_func():
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞')
    parser.add_argument('user_data', metavar='Data', type=str, nargs='*', help='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YEAR')
    args = parser.parse_args()
    original_str = args.user_data[0]
    print_result(original_str)
    
def print_result(orig_str):
    result = check_date(orig_str)
    logger.info(result)
    if result == True:
        print(f'–î–∞—Ç–∞ {orig_str} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    else:
        print(f'–î–∞—Ç–∞ {orig_str} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


if __name__ == '__main__':

    # user_date = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY: ")
    # print(check_date(user_date))
    # python .\hw_task7.py 22.03.2023
    # python .\hw_task7.py 22.13.2023 
    parser_func()