# –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏. üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. 
# –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
# üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, # –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.

import argparse
import logging
from datetime import datetime

logging.basicConfig(filename="result_5.log", filemode='w', encoding='utf-8', level=logging.INFO) 
logger = logging.getLogger(__name__)

def split_str(text):
    split_text = text.split(' ')
    print(split_text)
    month = split_text[2]
    weekDay = split_text[1]
    day = split_text[0]
    text_to_date(month, weekDay, day)

def text_to_date(month: str, weekDay: str, day: str):
    # text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ")
    logger.info([day, weekDay, month])
    year = datetime.today().year
    dayNumber = int(day.split("-")[0])
    if month.isdigit():
        monthNumber = int(month)
    else:
        monthDict = {"—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
                    "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12}
        monthNumber = monthDict[month]
    weekDict = {"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–≤—Ç–æ—Ä–Ω–∏–∫": 1, "—Å—Ä–µ–¥–∞": 2, "—á–µ—Ç–≤–µ—Ä–≥": 3, "–ø—è—Ç–Ω–∏—Ü–∞": 4, "—Å—É–±–±–æ—Ç–∞": 5, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6}
    weekDayNumber = weekDict[weekDay]
    dayMonth = 1
    count = 0
    for i in range(1, 32):
        myDate = datetime.date(datetime(year, monthNumber, i))
        dayName = datetime.weekday(myDate)
        if dayName == weekDayNumber:
            count += 1
            if count == dayNumber:
                dayMonth = i
                break
    result = f'{dayMonth}.{monthNumber}.{year}' 
    print(result)
    logger.info(result)

def parser_func():
    parser = argparse.ArgumentParser(description='–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É')
    parser.add_argument('dayNumber', default='1')
    parser.add_argument('weekDay', default=datetime.now().weekday())
    parser.add_argument('month', default=datetime.now().month)
    args = parser.parse_args()
    text_to_date(args.month, args.weekDay, args.dayNumber)


if __name__ == '__main__':
    
    parser_func()
       
    # python .\task5.py 1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è
    # python .\task5.py 1-–π —á–µ—Ç–≤–µ—Ä–≥ 11
    # split_str('1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è')
    # split_str('1-–π —á–µ—Ç–≤–µ—Ä–≥ 11')
    # split_str('3-—è –ø—è—Ç–Ω–∏—Ü–∞ –∏—é–ª—è')