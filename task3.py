# –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2. üìå –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ:
# ‚óã —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
# ‚óã –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
# ‚óã –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞),
# ‚óã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞,
# ‚óã —Ä–µ–∑—É–ª—å—Ç–∞—Ç.


import logging
from datetime import datetime

logging.basicConfig(filename="result.log", filemode='w', encoding='utf-8', level=logging.INFO)
logger = logging.getLogger(__name__)

def superLogger(func):
    def wrapper(*args, **kwargs):
        dict = {}
        dict["level"] = logger.level
        dict["function"] = func.__name__
        dict["arguments"] = [*args]
        result = func(*args, **kwargs)
        dict["result"] = result
        # dt = datetime.now() 
        # dict["data_time"] = dt
        logger.info(dict)
        logger.info(datetime.now())
        return result
    return wrapper

@superLogger
def sum_ever(x, y):
    return x + y


if __name__ == '__main__':
    print(sum_ever (5, 10))